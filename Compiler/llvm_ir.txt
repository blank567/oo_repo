declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@a = dso_local global [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10]
@.str.0 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"b = \00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

define dso_local void @foo(i32* %ver0) {
ver1:
    %ver2 = alloca i32*
    store i32* %ver0, i32** %ver2
    %ver3 = load i32*, i32** %ver2
    %ver4 = alloca i32
    %ver5 = getelementptr inbounds i32, i32* %ver3, i32 2
    %ver6 = load i32, i32* %ver5
    store i32 %ver6, i32* %ver4
    %ver7 = load i32, i32* %ver4
    call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.0, i64 0, i64 0))
    call void @putint(i32 %ver7)
    call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
    %ver8 = load i32, i32* %ver4
    %ver9 = add i32 %ver8, 1
    store i32 %ver9, i32* %ver4
    %ver10 = load i32, i32* %ver4
    call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
    call void @putint(i32 %ver10)
    call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
    ret void
}

define dso_local i32 @main() {
ver0:
    %ver1 = alloca [10 x i32]
    %ver2 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 0
    store i32 1, i32* %ver2
    %ver3 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 1
    store i32 2, i32* %ver3
    %ver4 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 2
    store i32 3, i32* %ver4
    %ver5 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 3
    store i32 4, i32* %ver5
    %ver6 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 4
    store i32 5, i32* %ver6
    %ver7 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 5
    store i32 6, i32* %ver7
    %ver8 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 6
    store i32 7, i32* %ver8
    %ver9 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 7
    store i32 8, i32* %ver9
    %ver10 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 8
    store i32 9, i32* %ver10
    %ver11 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 9
    store i32 10, i32* %ver11
    %ver12 = alloca i32
    %ver13 = getelementptr [10 x i32], [10 x i32]* %ver1, i32 0, i32 2
    %ver14 = load i32, i32* %ver13
    %ver15 = add i32 %ver14, 1
    store i32 %ver15, i32* %ver12
    %ver16 = alloca i32
    %ver17 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 2
    %ver18 = load i32, i32* %ver17
    %ver19 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 %ver18
    %ver20 = load i32, i32* %ver19
    store i32 %ver20, i32* %ver16
    %ver21 = load i32, i32* %ver16
    call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
    call void @putint(i32 %ver21)
    call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
    %ver22 = load i32, i32* %ver16
    %ver23 = add i32 %ver22, 1
    store i32 %ver23, i32* %ver16
    %ver24 = load i32, i32* %ver16
    call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
    call void @putint(i32 %ver24)
    call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
    ret i32 0
}

